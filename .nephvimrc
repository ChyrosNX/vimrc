"""
"
" VimRC Neph Library
"
" Author  : ChyrosNX
" Version : 0.0.1-Alpha
"
" Desc    : Neph library used by ChyrosNX's .vimrc file.
"
"""


""" Extra features
function! NX_ShowEditorGuides(global)
    " Show/hide editing guides such as spacing and linebreak symbols, and
    " 80-column line
    if g:nx__editorGuidesHidden
        if a:global
            set list colorcolumn=80
        else
            setlocal list colorcolumn=80
            echo "Editor guides enabled."
        endif
    else
        if a:global
            set nolist colorcolumn=
        else
            setlocal nolist colorcolumn=
            echo "Editor guides disabled."
        endif
    endif
    let g:nx__editorGuidesHidden = !g:nx__editorGuidesHidden
endfunction
let g:nx__editorGuidesHidden = g:show_editor_guides
unlet g:show_editor_guides
call NX_ShowEditorGuides(1)

function! NX_SpaceFunction()
    " Re-map <Space> to some frequently used commands
    if g:nx__spaceFunction == 0
        nmap <Space> .
        echo "<Space> now works as . command (repeat last change)"
    elseif g:nx__spaceFunction == 1
        nmap <Space> @@
        echo "<Space> now works as @@ command (repeat last macro)"
    elseif g:nx__spaceFunction == 2
        nmap <Space> <nop>
        echo "<Space> is now unbound"
        let g:nx__spaceFunction = -1
    endif
    let g:nx__spaceFunction += 1
endfunction
let g:nx__spaceFunction = 0

function! NX_ChangeFileFormat()
    " Change linespace from UNIX to DOS and vice-versa
    if &fileformats == "unix,dos"
        set fileformats=dos,unix
        set fileformat=dos
        echo "FileFormat set to DOS."
    else
        set fileformats=unix,dos
        set fileformat=unix
        echo "FileFormat set to UNIX."
    endif
endfunction


""" Special VIM behaviors
function! NX_SetTempDirectory(temp_dir)
    " Set swap file directory
    let temp_dir = NX_parse_path(a:temp_dir)
    call NX__create_dir(temp_dir)
    let &directory = temp_dir
endfunction

function! NX_EnablePersistentUndo(undo_dir)
    " Persist undo forever
    let undo_dir = NX_parse_path(a:undo_dir)
    call NX__create_dir(undo_dir)
    let &undodir = undo_dir
    set undofile
endfunction


""" Plugin-related
function! NX_has_plugin(name)
    for plugin in g:nx_enabled_plugins
        let plugin_name = strpart(
            \     plugin
            \     , strridx(plugin, '/', strlen(plugin)) + 1
            \     , strlen(plugin)
            \ )
        if plugin_name == a:name
            let plugin_dir = g:nx_plugin_dir . "/" . plugin_name
            return !empty(glob(plugin_dir))
        endif
    endfor
endfunction

function! NX_NERDTreeToggle()
    " Check if NERDTree window is visible in the current tabpage
    if exists('t:NERDTreeBufName') && bufwinnr(t:NERDTreeBufName) != -1
        :NERDTreeClose
    else
        :NERDTreeCWD
    endif
endfunction


""" OS-dependent Utilities
function! NX__create_dir(dir)
    let dir = NX_parse_path(a:dir)
    if empty(glob(dir))
        if has("unix")
            call system("mkdir -p " . dir)
        elseif has("win32")
            call system("mkdir " . dir)
        endif
    endif
endfunction

function! NX__copy_file(src, dest)
    if has("unix")
        call system("cp " . a:src . " " . a:dest)
    elseif has("win32")
        call system("copy /Y " . NX_parse_path(a:src) . " " .
            \ NX_parse_path(a:dest))
    endif
endfunction

function! NX_parse_path(path)
    " Parse UNIX-like path into DOS format
    if has("win32")
        " unix-to-win32 path format
        return expand(substitute(a:path, "/", "\\", "g"))
    endif
    return expand(a:path)
endfunction

